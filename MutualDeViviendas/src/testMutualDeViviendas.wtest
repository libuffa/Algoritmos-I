import Mutual.*
import Familia.*
import Vivienda.*
import Persona.*

describe "test de mutual de viviendas"{
	
	var viviendaUno
	var viviendaDos
	var gonzales
	var enrique
	var julieta
	var martin
	var martina
	var pereyra
	var pedro
	var maria
	var aldana
	var pepe
	var marisa
	var esteban
	
	
	fixture{
		viviendaUno = new Casa(20, 4)
		viviendaDos = new Departamento(13, 30)
		enrique = new Persona("enrique", 50)
		julieta = new Persona("julieta", 46)
		martin = new Persona("martin", 21)
		martina = new Persona("martina", 8)
		gonzales = new Familia(enrique, [julieta, martin, martina], 12)
		aldana = new Persona("aldana", 40)
		pedro = new Persona("pedro", 36)
		pereyra  = new Familia(aldana, [pedro], 30)
		pepe = new Electricista("pepe", 32)
		marisa = new Decoradora("marisa", 41)
		esteban = new Desordenado("esteban", 21)
		mutual.agregarFamiliasALaMutual([gonzales, pereyra])
	}
	
	test "verificar que una mutual de viviendas tiene un conjunto de familias"{
		assert.equals(2, mutual.cantidadDeFamilias())
	}
	
	test "la mutual recibe una vivienda y estima horas en arreglarla"{
		assert.equals(20, viviendaUno.obtenerHorasEstimadas())
	}
	
	test "verificar que la familia tiene titular"{
		assert.equals(enrique, gonzales.obtenerTitularFamilia())
	}
	
	test "verificar que la familia tiene integrantes"{
		assert.equals(3, gonzales.cantidadOtrosIntegrantesFamilia())
	}
	
	test "trabajar y cargar las horas en la vivienda"{
		viviendaUno.arreglarme(6)
		assert.equals(6, viviendaUno.obtenerHorasTrabajadas())
	}
	
	test "registrar las horas de trabajo"{
		mutual.agregarRegistroDeHoras(viviendaUno, martin,6, "cortar madera")
		assert.equals(1, mutual.cantidadDeRegistrosDeHoras())
	}
	
	test "registrar las horas trabajadas de martin"{
		enrique.realizarTrabajo(6)
		assert.equals(6, enrique.obtenerCantidadDeHorasTrabajadas())
	}
	
	test "verificar si impactaron las horas en la familia gonzales"{
		enrique.realizarTrabajo(6)
		julieta.realizarTrabajo(4)
		assert.equals(10, gonzales.obtenerTotalDeHorasTrabajadas())
	}
	
	test "verificar si los gonzales cumplieron con su cuota minima de horas"{
		enrique.realizarTrabajo(6)
		julieta.realizarTrabajo(4)
		martin.realizarTrabajo(4)
		assert.that(gonzales.cumpliConMisHoras())
	}
	
	test "verificar si los gonzales NO cumplieron con su cuota minima de horas"{
		enrique.realizarTrabajo(6)
		julieta.realizarTrabajo(4)
		assert.notThat(gonzales.cumpliConMisHoras())
	}
	
	test "verificar si la mutual envio a trabajar en la vivienda y se registro todo correctamente"{
		mutual.trabajarEnVivienda(viviendaUno, martin, 6, "cortar madera")
		assert.equals(6, viviendaUno.obtenerHorasTrabajadas())
		assert.equals(1, mutual.cantidadDeRegistrosDeHoras())
		assert.equals(6, martin.obtenerCantidadDeHorasTrabajadas())
		assert.equals(6, gonzales.obtenerTotalDeHorasTrabajadas())
	}
	
	test "verificar cuando una vivienda esta completamente arreglada"{
		mutual.trabajarEnVivienda(viviendaUno, martin, 8, "cortar madera")
		mutual.trabajarEnVivienda(viviendaUno, enrique, 6, "hacer ventanas")
		mutual.trabajarEnVivienda(viviendaUno, aldana, 8, "armar conexiones")
		mutual.trabajarEnVivienda(viviendaUno, julieta, 4, "levantar techos")
		assert.that(viviendaUno.estoyArreglada())
	}
	
	test "verificar cuando una vivienda NO esta completamente arreglada"{
		mutual.trabajarEnVivienda(viviendaUno, martin, 8, "cortar madera")
		mutual.trabajarEnVivienda(viviendaUno, enrique, 6, "hacer ventanas")
		assert.notThat(viviendaUno.estoyArreglada())
	}
	
	test "verificar la capacidad de una casa"{
		assert.equals(4, viviendaUno.obtenerCapacidad())
	}
	
	test "verificar la capacidad de un departamento"{
		assert.equals(2, viviendaDos.obtenerCapacidad())
	}
	
	test "verificar si la casa es adecuada para los gonzales"{
		assert.that(viviendaUno.soyAdecuadaParaUstedes(gonzales))
	}
	
	test "verificar si la casa no es adecuada para los gonzales"{
		assert.notThat(viviendaUno.soyAdecuadaParaUstedes(pereyra))
	}
	
	test "entregar viviendaUno a los gonzales"{
		mutual.trabajarEnVivienda(viviendaUno, martin, 8, "cortar madera")
		mutual.trabajarEnVivienda(viviendaUno, enrique, 6, "hacer ventanas")
		mutual.trabajarEnVivienda(viviendaUno, aldana, 8, "armar conexiones")
		mutual.trabajarEnVivienda(viviendaUno, julieta, 4, "levantar techos")
		mutual.entregarVivienda(viviendaUno, gonzales)
		assert.equals(viviendaUno, gonzales.obtenerVivienda())
	}
	
	test "no entregar viviendaUno a los pereyra"{
		mutual.trabajarEnVivienda(viviendaUno, martin, 8, "cortar madera")
		mutual.trabajarEnVivienda(viviendaUno, enrique, 6, "hacer ventanas")
		mutual.trabajarEnVivienda(viviendaUno, aldana, 8, "armar conexiones")
		mutual.trabajarEnVivienda(viviendaUno, julieta, 4, "levantar techos")
		mutual.entregarVivienda(viviendaUno, pereyra)
		assert.notThat(mutual.seCumplenLasCondicionesDeEntrega(viviendaUno, pereyra))
	}
	
	test "verificar que un menor de edad no pueda trabajar"{
		assert.throwsException({ martina.realizarTrabajo(3) })
	}
	
	test "verificar si tengo vivienda"{
		assert.that(gonzales.noTengoVivienda())
	}
	
	test "filtrar registros de horas de vivienda por parametro"{
		mutual.trabajarEnVivienda(viviendaUno, martin, 8, "cortar madera")
		mutual.trabajarEnVivienda(viviendaUno, pedro, 6, "hacer ventanas")
		assert.equals(2, mutual.cantidadDeFamiliasQueTrabajaronEnLaVivienda(viviendaUno))
	}
	
	test "verificar que se aumentan las horas de pepe electricista"{
		assert.equals(12, pepe.calcularHorasTrabajadas(10))
	}
	
	test "verificar que se aumentan las horas de marisa"{
		assert.equals(8, marisa.calcularHorasTrabajadas(4))
	}
	
	test "verificar que disminuyan las horas de esteban"{
		assert.equals(7.5, esteban.calcularHorasTrabajadas(10))
	}
}